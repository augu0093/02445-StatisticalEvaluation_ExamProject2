for (i in 1:32) {
train_data <- Phosphorous[-i, ]
test_data <- Phosphorous[i, ]
# Standardized data
# train_data <- PhosphorousStandard[-i, ]
# test_data <- PhosphorousStandard[i, ]
# Train model, make prediction, calculate MSE
#mDGTMM <- drm(yield ~ DGT, data = train_data, fct = MM.2())
modelDGT.nls <- nls(yield ~ a * DGT/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
df <- data.frame(
a <- c(coef(modelDGT.nls)[2]),
b <-c(coef(modelDGT.nls)[1]),
DGT <- c(test_data$DGT)
)
predictionDGTMM <- predict(modelDGT.nls, newdata = df)
pred.errorsDGTMM[i] <- test_data$yield - predictionDGTMM
}
# Define MSE from CV
mean(pred.errorsDGTMM^2) # = 123.5609
predict(modelDGT.nls, newdata = df)
for (i in 1:32) {
train_data <- Phosphorous[-i, ]
test_data <- Phosphorous[i, ]
# Standardized data
# train_data <- PhosphorousStandard[-i, ]
# test_data <- PhosphorousStandard[i, ]
# Train model, make prediction, calculate MSE
#mDGTMM <- drm(yield ~ DGT, data = train_data, fct = MM.2())
modelDGT.nls <- nls(yield ~ a * DGT/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
dfDGT <- data.frame(
a <- c(coef(modelDGT.nls)[2]),
b <- c(coef(modelDGT.nls)[1]),
DGT <- c(test_data$DGT)
)
predictionDGTMM <- predict(modelDGT.nls, newdata = dfDGT)
pred.errorsDGTMM[i] <- test_data$yield - predictionDGTMM
modelOlsenP.nls <- nls(yield ~ a * olsenP/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
dfOlsenP <- data.frame(
a <- c(coef(modelOlsenP.nls)[2]),
b <- c(coef(modelOlsenP.nls)[1]),
olsenP <- c(test_data$olsenP)
)
predictionOlsenPMM <- predict(modelOlsenP.nls, newdata = dfOlsenP)
pred.errorsOlsenPMM[i] <- test_data$yield - predictionOlsenPMM
}
pred.errorsolsenPMM <- rep(NA, 32)
for (i in 1:32) {
train_data <- Phosphorous[-i, ]
test_data <- Phosphorous[i, ]
# Standardized data
# train_data <- PhosphorousStandard[-i, ]
# test_data <- PhosphorousStandard[i, ]
# Train model, make prediction, calculate MSE
#mDGTMM <- drm(yield ~ DGT, data = train_data, fct = MM.2())
modelDGT.nls <- nls(yield ~ a * DGT/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
dfDGT <- data.frame(
a <- c(coef(modelDGT.nls)[2]),
b <- c(coef(modelDGT.nls)[1]),
DGT <- c(test_data$DGT)
)
predictionDGTMM <- predict(modelDGT.nls, newdata = dfDGT)
pred.errorsDGTMM[i] <- test_data$yield - predictionDGTMM
modelOlsenP.nls <- nls(yield ~ a * olsenP/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
dfOlsenP <- data.frame(
a <- c(coef(modelOlsenP.nls)[2]),
b <- c(coef(modelOlsenP.nls)[1]),
olsenP <- c(test_data$olsenP)
)
predictionOlsenPMM <- predict(modelOlsenP.nls, newdata = dfOlsenP)
pred.errorsOlsenPMM[i] <- test_data$yield - predictionOlsenPMM
}
pred.errorsOlsenPMM <- rep(NA, 32)
for (i in 1:32) {
train_data <- Phosphorous[-i, ]
test_data <- Phosphorous[i, ]
# Standardized data
# train_data <- PhosphorousStandard[-i, ]
# test_data <- PhosphorousStandard[i, ]
# Train model, make prediction, calculate MSE
#mDGTMM <- drm(yield ~ DGT, data = train_data, fct = MM.2())
modelDGT.nls <- nls(yield ~ a * DGT/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
dfDGT <- data.frame(
a <- c(coef(modelDGT.nls)[2]),
b <- c(coef(modelDGT.nls)[1]),
DGT <- c(test_data$DGT)
)
predictionDGTMM <- predict(modelDGT.nls, newdata = dfDGT)
pred.errorsDGTMM[i] <- test_data$yield - predictionDGTMM
modelOlsenP.nls <- nls(yield ~ a * olsenP/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
dfOlsenP <- data.frame(
a <- c(coef(modelOlsenP.nls)[2]),
b <- c(coef(modelOlsenP.nls)[1]),
olsenP <- c(test_data$olsenP)
)
predictionOlsenPMM <- predict(modelOlsenP.nls, newdata = dfOlsenP)
pred.errorsOlsenPMM[i] <- test_data$yield - predictionOlsenPMM
}
mean(pred.errorsOlsenPMM^2) # =
# Define MSE from CV
mean(pred.errorsDGTMM^2) # = 123.5609
predict(modelDGT.nls, newdata = dfDGT)
for (i in 1:32) {
train_data <- Phosphorous[-i, ]
test_data <- Phosphorous[i, ]
# Standardized data
# train_data <- PhosphorousStandard[-i, ]
# test_data <- PhosphorousStandard[i, ]
# Train model, make prediction, calculate MSE
#mDGTMM <- drm(yield ~ DGT, data = train_data, fct = MM.2())
modelDGT.nls <- nls(yield ~ a * DGT/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
dfDGT <- data.frame(
a <- c(coef(modelDGT.nls)[2]),
b <- c(coef(modelDGT.nls)[1]),
DGT <- c(test_data$DGT)
)
predictionDGTMM <- predict(modelDGT.nls, newdata = dfDGT)
pred.errorsDGTMM[i] <- test_data$yield - predictionDGTMM
modelOlsenP.nls <- nls(yield ~ a * olsenP/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
dfOlsenP <- data.frame(
a <- c(coef(modelOlsenP.nls)[2]),
b <- c(coef(modelOlsenP.nls)[1]),
olsenP <- c(test_data$olsenP)
)
predictionOlsenPMM <- predict(modelOlsenP.nls, newdata = dfOlsenP)
pred.errorsOlsenPMM[i] <- test_data$yield - predictionOlsenPMM
}
# Define MSE from CV
mean(pred.errorsDGTMM^2) # = 123.5609
mean(pred.errorsOlsenPMM^2) # = 253.0265
for (i in 1:32) {
# train_data <- Phosphorous[-i, ]
# test_data <- Phosphorous[i, ]
# Standardized data
train_data <- PhosphorousStandard[-i, ]
test_data <- PhosphorousStandard[i, ]
# Train model, make prediction, calculate MSE
#mDGTMM <- drm(yield ~ DGT, data = train_data, fct = MM.2())
modelDGT.nls <- nls(yield ~ a * DGT/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
dfDGT <- data.frame(
a <- c(coef(modelDGT.nls)[2]),
b <- c(coef(modelDGT.nls)[1]),
DGT <- c(test_data$DGT)
)
predictionDGTMM <- predict(modelDGT.nls, newdata = dfDGT)
pred.errorsDGTMM[i] <- test_data$yield - predictionDGTMM
modelOlsenP.nls <- nls(yield ~ a * olsenP/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
dfOlsenP <- data.frame(
a <- c(coef(modelOlsenP.nls)[2]),
b <- c(coef(modelOlsenP.nls)[1]),
olsenP <- c(test_data$olsenP)
)
predictionOlsenPMM <- predict(modelOlsenP.nls, newdata = dfOlsenP)
pred.errorsOlsenPMM[i] <- test_data$yield - predictionOlsenPMM
}
# Plotting this
ggplot(Phosphorous, aes(x = DGT, y = yield)) +
theme_bw() +
xlab("DGT [mug/L]") +
ylab("Yield [100kg]") +
ggtitle("Michaelis-Menten kinetics") +
geom_point(alpha = 0.5) +
geom_line(data = DGTl, aes(x = DGT, y = yield), colour = "red")
DGTl <- data.frame(DGT = seq(0, max(Phosphorous$DGT), length.out = 100))
modelDGT.nls <- nls(yield ~ a * DGT/(b+DGT), data = Phosphorous, start = list(b = max(Phosphorous$yield)/2, a = max(Phosphorous$yield)))
DGTl <- data.frame(DGT = seq(0, max(Phosphorous$DGT), length.out = 100))
DGTl$yield <- predict(modelDGT.nls, newdata = DGTl)
ggplot
# Plotting this
ggplot(Phosphorous, aes(x = DGT, y = yield)) +
theme_bw() +
xlab("DGT [mug/L]") +
ylab("Yield [100kg]") +
ggtitle("Michaelis-Menten kinetics") +
geom_point(alpha = 0.5) +
geom_line(data = DGTl, aes(x = DGT, y = yield), colour = "red")
modelOlsenP.nls <- nls(yield ~ a * olsenP/(b+olsenP), data = Phosphorous, start = list(b = max(Phosphorous$yield)/2, a = max(Phosphorous$yield)))
olsenPl <- data.frame(olsenP = seq(0, max(Phosphorous$olsenP), length.out = 100))
olsenPl$yield <- predict(model.modelOlsenP.nls, newdata = DGTl)
olsenPl$yield <- predict(modelOlsenP.nls, newdata = DGTl)
olsenPl$yield <- predict(modelOlsenP.nls, newdata = olsenPl)
# Plotting this
ggplot(Phosphorous, aes(x = olsenP, y = yield)) +
theme_bw() +
xlab("Olsen-P [mg/100g]") +
ylab("Yield [100kg]") +
ggtitle("Michaelis-Menten kinetics") +
geom_point(alpha = 0.5) +
geom_line(data = olsenPl, aes(x = olsenP, y = yield), colour = "red")
# Leave-one-out CV for testing accuray of non-linear model
pred.errorsDGTMM <- rep(NA, 32)
pred.errorsOlsenPMM <- rep(NA, 32)
for (i in 1:32) {
train_data <- Phosphorous[-i, ]
test_data <- Phosphorous[i, ]
# Standardized data
# train_data <- PhosphorousStandard[-i, ]
# test_data <- PhosphorousStandard[i, ]
# Train model, make prediction, calculate MSE
#mDGTMM <- drm(yield ~ DGT, data = train_data, fct = MM.2())
modelDGT.nls <- nls(yield ~ a * DGT/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
dfDGT <- data.frame(
a <- c(coef(modelDGT.nls)[2]),
b <- c(coef(modelDGT.nls)[1]),
DGT <- c(test_data$DGT)
)
predictionDGTMM <- predict(modelDGT.nls, newdata = dfDGT)
pred.errorsDGTMM[i] <- test_data$yield - predictionDGTMM
modelOlsenP.nls <- nls(yield ~ a * olsenP/(b+DGT), data = train_data, start = list(b = max(train_data$yield)/2, a = max(train_data$yield)))
dfOlsenP <- data.frame(
a <- c(coef(modelOlsenP.nls)[2]),
b <- c(coef(modelOlsenP.nls)[1]),
olsenP <- c(test_data$olsenP)
)
predictionOlsenPMM <- predict(modelOlsenP.nls, newdata = dfOlsenP)
pred.errorsOlsenPMM[i] <- test_data$yield - predictionOlsenPMM
}
# Define MSE from CV
mean(pred.errorsDGTMM^2) # = 123.5609
mean(pred.errorsOlsenPMM^2) # = 253.0265
### Loading data
load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
#as.factor(Phosphorous$location)
# Attach makes it unnescesary to write 'Phosphorous$'location
attach(Phosphorous)
location
# Create standardized data set
PhosphorousStandard <- Phosphorous
PhosphorousStandard$DGT <- scale(Phosphorous$DGT)
PhosphorousStandard$olsenP <- scale(Phosphorous$olsenP)
# Combined model: yield ~ location + DGT + olsenP
modelAll <- lm(yield ~ as.factor(location) + DGT + olsenP)
summary(modelAll)
plot(modelAll, main="yield ~ location + DGT + olsenP")
plot(modelAll, main="yield ~ location + DGT + olsenP")
par(mfrow=c(2,2))
plot(modelAll, main="yield ~ location + DGT + olsenP")
plot(modelAll, main="yield ~ location + DGT + olsenP")
anova(modelAll)
summary(modelAll)
modelAll <- lm(yield ~ location + DGT + olsenP)
summary(modelAll)
modelAll <- lm(yield ~ as.numeric(location) + DGT + olsenP)
summary(modelAll)
View(Phosphorous)
summary(modelDGT)
# Model: yield ~ DGT
modelDGT <- lm(yield ~ DGT)
summary(modelDGT)
summary(modelDGT)
modelDGT$coefficients[1]
modelDGT$coefficients[3]
summary(modelDGT)
modelDGT$rank[2]
modelDGT$rank[1]
modelDGT$coefficients[4]
modelDGT$p.value
summary(modelDGT)$p.value
glance(modelDGT)$p.value
modelDGT$coefficients[,3]
summary(modelDGT)$coefficients[,3]
summary(modelDGT)
summary(modelDGT)$coefficients[,3]
summary(modelDGT)$coefficients[,4]
summary(modelDGT)$coefficients[2,4]
pValueDGT <- rep(NA, 32)
for (i in 1:32) {
train_data <- Phosphorous[-i, ]
modelDGTL <- lm(yield ~ DGT, data = train_data)
pValueDGT[i] <- summary(modelDGT)$coefficients[2,4]
}
mean(pValueDGT)
pValueDGT <- rep(NA, 32)
for (i in 1:32) {
train_data <- Phosphorous[-i, ]
modelDGTL <- lm(yield ~ DGT, data = train_data)
pValueDGT[i] <- summary(modelDGTL)$coefficients[2,4]
}
mean(pValueDGT)
print(pValueDGT)
# Set working directory
setwd("C:/Users/August/Dropbox/3semester/Projekt_i_statistisk_evaluering/Statistical_Evaluation_Project2")
### Loading data
load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
#as.factor(Phosphorous$location)
# Attach makes it unnescesary to write 'Phosphorous$'location
attach(Phosphorous)
# Create standardized data set
PhosphorousStandard <- Phosphorous
PhosphorousStandard$DGT <- scale(Phosphorous$DGT)
PhosphorousStandard$olsenP <- scale(Phosphorous$olsenP)
par(mfrow=c(2,2))
# Combined model: yield ~ location + DGT + olsenP
modelAll <- lm(yield ~ as.factor(location) + DGT + olsenP)
summary(modelAll)
plot(modelAll, main="yield ~ location + DGT + olsenP")
anova(modelAll)
modelAll <- lm(yield ~ as.numeric(location) + DGT + olsenP)
summary(modelAll)
# Combined model: yield ~ location + DGT + olsenP
modelAll <- lm(yield ~ as.factor(location) + DGT + olsenP)
summary(modelAll)
ancova(modelAll)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(broom)
install.packages("rstatix")
install.packages("ggpubr")
install.packages("tidyverse")
library(tidyverse)
library(ggpubr)
library(rstatix)
anova(modelAll)
ancova(modelAll)
rm(list=ls())
### Loading data
load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
#as.factor(Phosphorous$location)
# Attach makes it unnescesary to write 'Phosphorous$'location
attach(Phosphorous)
# Create standardized data set
PhosphorousStandard <- Phosphorous
PhosphorousStandard$DGT <- scale(Phosphorous$DGT)
PhosphorousStandard$olsenP <- scale(Phosphorous$olsenP)
# Give short data summary of quartiles and min/max
summary(Phosphorous)
# Combined model: yield ~ location + DGT + olsenP
modelAll <- lm(yield ~ as.factor(location) + DGT + olsenP)
summary(modelAll)
anova(modelAll)
# Combined model: yield ~ location + DGT + olsenP
modelAll <- lm(yield ~ location + DGT + olsenP)
summary(modelAll)
View(Phosphorous)
DGTmean <- rep(NA,9)
for (i in 1:9){
DGTmean[i] <- mean(DGT[1+4*(i-1):4+4*(i-1)])
}
DGTmean
mean(DGT[1:4])
for (i in 1:9){
DGTmean[i] <- mean(DGT[1+4*(i):4+4*(i)])
}
DGTmean
View(Phosphorous)
DGTmean <- DGT[seq(1,length(DGT), 4)]
DGTmean
# Combined model: yield ~ location + DGT + olsenP
modelAll <- lm(yield ~ DGT + olsenP + as.factor(location))
summary(modelAll)
anova(modelAll)
cor(modelAll)
alias(modelAll)
# Model: yield ~ DGT
modelDGT <- lm(yield ~ DGT)
summary(modelDGT)
plot(modelDGT, main="yield ~ DGT")
anova(modelDGT)
# Model: yield ~ olsenP
modelOlsenP <- lm(yield ~ olsenP)
summary(modelOlsenP)
anova(modelOlsenP)
# Combined model of DGT and olsenP: yield ~ DGT + olsenP
modelDGTolsenP <- lm(yield ~ DGT + olsenP)
summary(modelDGTolsenP)
anova(modelDGTolsenP)
# Combined model of DGT and olsenP: yield ~ DGT * olsenP
modelDGTolsenPm <- lm(yield ~ DGT * olsenP)
summary(modelDGTolsenPm) # p-valueDGT = 0.0946, p-valueOlsenP = 0.4648
#   (Intercept) 93.39543    8.56600  10.903 1.38e-11 ***
#   DGT         -0.27738    0.13499  -2.055  0.04933 *
#   olsenP      -7.57720    2.31088  -3.279  0.00279 **
#   DGT:olsenP   0.07568    0.02179   3.472  0.00169 **
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 8.882 on 28 degrees of freedom
# Multiple R-squared:  0.4046,	Adjusted R-squared:  0.3408
# F-statistic: 6.343 on 3 and 28 DF,  p-value: 0.00203
plot(modelDGTolsenP, main="yield ~ DGT * olsenP")
anova(modelDGTolsenPm)
beta_perm <- rep(NA, 1000)
coef(modelDGT)[2]
summary(modelDGT)
modelDGT
summary(modelDGT)
### Permutation
DGT_perm <- rep(NA, 1000)
### Permutation
beta_perm <- rep(NA, 1000)
for (i in 1:1000) {
DGT_perm <- DGT[sample(32)] # permute x's
L <- lm(yield ~ DGT_perm)
beta_perm[i] <- coef(L)[2]
}
hist(beta_perm)
beta_obs <- coef(lm(yield ~ DGT))[2]
beta_obs
quantile(beta_perm, c(0.025, 0.975)) ## see if beta_obs is inside interval
## p value
#
p0 <- sum(beta_perm < beta_obs) / 1000 ## get position in distribution
{
if (p0 > 0.5) p <- 2*(1-p0)
else p <- 2*p0
}
p # p value
### Permutation
beta_perm <- rep(NA, 1000)
for (i in 1:1000) {
olsenP_perm <- olsenP[sample(366)] # permute x's
L <- lm(yield ~ olsenP_perm)
beta_perm[i] <- coef(L)[2]
}
### Permutation
beta_perm <- rep(NA, 1000)
for (i in 1:1000) {
olsenP_perm <- olsenP[sample(32)] # permute x's
L <- lm(yield ~ olsenP_perm)
beta_perm[i] <- coef(L)[2]
}
hist(beta_perm)
### Permutation DGT, olsenP and the combined models
par(mfrow=c(1,1))
### Permutation
beta_perm <- rep(NA, 1000)
for (i in 1:1000) {
olsenP_perm <- olsenP[sample(32)] # permute x's
L <- lm(yield ~ olsenP_perm)
beta_perm[i] <- coef(L)[2]
}
hist(beta_perm)
DGTmodel_perm <- rep(NA, 1000)
DGTmodel_perm <- rep(NA, 10000)
for (i in 1:10000) {
DGT_perm <- DGT[sample(32)] # permute DGT's
L <- lm(yield ~ DGT_perm)
DGTmodel_perm[i] <- coef(L)[2]
}
hist(DGTmodel_perm)
DGT_obs <- coef(lm(yield ~ DGT))[2]
DGT_obs
quantile(DGTmodel_perm, c(0.025, 0.975)) ## see if beta_obs is inside interval
## p value
#
p0 <- sum(DGTmodel_perm < DGT_obs) / 10000 ## get position in distribution
{
if (p0 > 0.5) p <- 2*(1-p0)
else p <- 2*p0
}
p # p value
p0
{
if (p0 > 0.5)
p <- 2*(1-p0)
else p <- 2*p0
}
p # p value
### Permutation
olsenPmodel_perm <- rep(NA, 10000)
for (i in 1:10000) {
olsenP_perm <- olsenP[sample(32)] # permute x's
L <- lm(yield ~ olsenP_perm)
olsenPmodel_perm[i] <- coef(L)[2]
}
hist(olsenPmodel_perm)
hist(DGTmodel_perm, main="Historgram: Slope of lm(yield ~ DGT")
hist(DGTmodel_perm, main="Historgram: Slope of lm(yield ~ DGT)")
olsenP_obs <- coef(lm(yield ~ olsenP))[2]
olsenP_obs
quantile(olsenPmodel_perm, c(0.025, 0.975)) ## see if beta_obs is inside interval
## p value
#
p0 <- sum(olsenPmodel_perm < olsenP_obs) / 1000 ## get position in distribution
{
if (p0 > 0.5) p <- 2*(1-p0)
else p <- 2*p0
}
p # p value
## p value
#
p0 <- sum(olsenPmodel_perm < olsenP_obs) / 10000 ## get position in distribution
{
if (p0 > 0.5) p <- 2*(1-p0)
else p <- 2*p0
}
p # p value
# Model DGT
modelDGT.nls <- nls(yield ~ a * DGT/(b+DGT), data = Phosphorous, start = list(b = max(Phosphorous$yield)/2, a = max(Phosphorous$yield)))
summary(modelDGT.nls)
# Model OlsenP
modelOlsenP.nls <- nls(yield ~ a * olsenP/(b+olsenP), data = Phosphorous, start = list(b = max(Phosphorous$yield)/2, a = max(Phosphorous$yield)))
summary(modelOlsenP.nls)
DGTNLmodel_perm <- rep(NA, 10000)
coef(modelDGT.nls)[2]
modelDGT
modelDGT.nls
DGTNLmodel_perm <- rep(NA, 10000)
for (i in 1:10000) {
DGTNL_perm <- DGT[sample(32)] # permute DGT's
L <-  nls(yield ~ a * DGT/(b+DGT), data = Phosphorous, start = list(b = max(Phosphorous$yield)/2, a = max(Phosphorous$yield)))
DGTNLmodel_perm[i] <- coef(L)[2]
}
hist(DGTNLmodel_perm, xlab="", main="Historgram: Slope of nls(yield ~ DGT)")
hist(DGTNLmodel_perm, xlab="", main="Historgram: Slope of nls(yield ~ DGT)")
DGTNLmodel_perm
