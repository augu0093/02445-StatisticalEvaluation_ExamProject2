load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
plot(location,yield)
Phosphorous$location <- as.factor(Phosphorous$location)
plot(location,yield)
# Attach makes it unnescesary to write 'Phosphorous$'location
attach(Phosphorous)
plot(location,yield)
plot(Phosphorous$location,yield)
# Attach makes it unnescesary to write 'Phosphorous$'location
attach(Phosphorous)
plot(location,yield)
plot(Phosphorous)
### Plotting data for general overview
par(mfrow = c(1,1))
plot(Phosphorous)
plot(location,yield,xlab="location")
plot(location,yield,xlab="Field",ylab="Yield",main="Boxplot of yield for each field.")
plot(location,yield,xlab="Field",ylab="Yield",main="Boxplot of yield for each field")
plot(location,yield,xlab="Field",ylab="Yield in hkg/ha",main="Boxplot of yield for each field")
plot(location,yield,xlab="Field",ylab="Yield (hkg/ha)",main="Boxplot of yield for each field")
plot(Phosphorous)
plot(Phosphorous,main="Correlation plot of Phosphorous data set")
corr(Phosphorous)
cor(Phosphorous)
cor(Phosphorous[c("yield","DGT","olsenP")])
chart.Correlation(Phosphorous)
# Combned model
modelDGT_OlsepP <- lm(yield ~ yield + olsenP)
# Combned model
modelDGT_OlsenP <- lm(yield ~ DGT + olsenP)
modelDGT <- lm(yield ~ DGT)
summary(modelDGT_OlsenP)
plot(modelDGT_OlsenP, main="yield ~ DGT + olsenP")
cor(Phosphorous[c("yield","DGT","olsenP")]) #Correlation matrix
plot(Phosphorous,main="Correlation plots of Phosphorous data set")
plot(Phosphorous[c("yield","DGT","olsenP")],main="Correlation plots of Phosphorous data set")
modelDGT <- lm(yield ~ location)
modelDGT <- lm(yield ~ DGT)
modelLocation <- lm(yield ~ location)
summary(modelLocation)
plot(modelLocation, main="yield ~ location")
### Making linear model from both DGT and olsenP
par(mfrow = c(2,2))
plot(modelLocation, main="yield ~ location")
plot(modelLocation, main="yield ~ location")
modelLocation <- lm(yield ~ location)
summary(modelLocation)
plot(modelLocation, main="yield ~ location")
plot(modelLocation)#, main="yield ~ location")
plot(modelLocation, main="yield ~ location")
yield <- c(10.3, 10.3, -4.95, -4.65, -6, -11)
fert <- c("a", "b", "a", "b", "a", "b")
## or
fert <- rep(c("a", "b"), 3)
field <- rep(c("a", "b", "c"), each = 2)
fertilizer.data <- data.frame(yield = yield, fertilizer = as.factor(fert), field = as.factor(field))
View(fertilizer.data)
L <- lm(yield ~ fert + field, data = fertilizer.data)
summary(L)
anova(L)
# Combined model
modelAll <- lm(yield ~ location + DGT + olsenP)
Anova(Phosphorous)
anova(Phosphorous)
anova(modelDGT)
summary(modelDGT)
# Combined model
modelAll <- lm(yield ~ location + DGT + olsenP)
DGT
olsenP
location
# Combined model
modelAll <- lm(yield ~ location + DGT + olsenP)
lenght(location)
len(location)
length(location)
length(DGT)
# Combined model
modelAll <- lm(yield ~ location + DGT + olsenP)
### Loading data
load("fosfor_data.RData")
# Attach makes it unnescesary to write 'Phosphorous$'location
attach(Phosphorous)
# Combined model
modelAll <- lm(yield ~ location + DGT + olsenP)
summary(modelAll)
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
plot(location,yield)
# Combined model
modelAll <- lm(yield ~ location + DGT + olsenP)
summary(modelAll)
plot(modelDGT_OlsenP, main="yield ~ location + DGT + olsenP")
plot(modelAll, main="yield ~ location + DGT + olsenP")
plot(modelAll, main="yield ~ location + DGT + olsenP")
anova(modelDGT)
anova(modelAll)
### Loading data
load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
Phosphorous$location <- as.factor(Phosphorous$location)
# Attach makes it unnescesary to write 'Phosphorous$'location
attach(Phosphorous)
plot(location,yield)
loca1 <- Phosphorous[location == "001",]
loca2 <- Phosphorous[location == "002",]
loca3 <- Phosphorous[location == "003",]
loca4 <- Phosphorous[location == "004",]
loca6 <- Phosphorous[location == "006",]
loca7 <- Phosphorous[location == "007",]
loca8 <- Phosphorous[location == "008",]
loca9 <- Phosphorous[location == "009",]
loca10 <- Phosphorous[location == "010",]
# Boxplot
plot(location,yield,xlab="Field",ylab="Yield (hkg/ha)",main="Boxplot of yield for each field")
# Plotting correlation between yield, DGT and olsenP. Location is not relevant here
plot(Phosphorous[c("yield","DGT","olsenP")],main="Correlation plots of Phosphorous data set")
cor(Phosphorous[c("yield","DGT","olsenP")]) #Correlation matrix
### Making linear model from both DGT and olsenP
par(mfrow = c(2,2))
modelDGT <- lm(yield ~ DGT)
summary(modelDGT)
plot(modelDGT, main="yield ~ DGT")
modelOlsenP <- lm(yield ~ olsenP)
summary(modelOlsenP)
plot(modelOlsenP, main="yield ~ olsenP")
modelLocation <- lm(yield ~ location)
summary(modelLocation)
plot(modelLocation, main="yield ~ location")
# Combined model
modelAll <- lm(yield ~ location + DGT + olsenP)
summary(modelAll)
plot(modelAll, main="yield ~ location + DGT + olsenP")
anova(modelDGT)
anova(modelOlsenP)
anova(modelLocation)
modelAllPool <- lm(yield ~ location * DGT * olsenP)
summary(modelAllPool)
DGT
olsenP
###  Michaelies-Menten model
#nls()
phos.model <- nls(yield ~ alfa * DGT/(beta + DGT) , data = Phosphorous, start = list(alfa = 90 , beta = 1)
summary(Phosphorous)
summary(Phosphorous)
summary(Phosphorous)
summary(modelOlsenP)
summary(modelDGT)
# Combined model: yield ~ DGT + olsenP
modelDGTolsenP <- lm(yield ~ DGT + olsenP)
summary(modelDGTolsenP)
plot(modelDGTolsenP, main="yield ~ location + DGT + olsenP")
summary(modelDGTolsenP)
summary(modelAll)
plot(location,yield)
summary(modelLocation)
anova(modelLocation)
plot(modelLocation, main="yield ~ location")
anova(modelLocation)
plot(modelLocation, main="yield ~ location")
plot(modelLocation, main="yield ~ location")
### Making linear model from both DGT and olsenP
par(mfrow = c(2,2))
summary(modelLocation)
plot(modelLocation, main="yield ~ location")
anova(modelLocation)
anova(L)
yield <- c(10.3, 10.3, -4.95, -4.65, -6, -11)
fert <- c("a", "b", "a", "b", "a", "b")
## or
fert <- rep(c("a", "b"), 3)
field <- rep(c("a", "b", "c"), each = 2)
## or
field <- c("a", "a", "b", "b", "c", "c")
fertilizer.data <- data.frame(yield = yield, fertilizer = as.factor(fert), field = as.factor(field))
L <- lm(yield ~ fert + field, data = fertilizer.data)
summary(L)
anova(L)
summary(modelLocation)
var(location)
var(loca4["location"])
var(loca4["yield"])
var(loca2["yield"])
var(loca2["yield"])
# Variance of all locations' yield
var(loca1["yield"])
var(loca2["yield"])
var(loca3["yield"])
var(loca4["yield"])
var(loca6["yield"])
var(loca7["yield"])
var(loca8["yield"])
var(loca10["yield"])
var(loca10["yield"])}
# Mean of these
mean(var(loca1["yield"]),var(loca2["yield"]),var(loca3["yield"]),var(loca4["yield"]),var(loca6["yield"]),var(loca7["yield"]),var(loca8["yield"]),var(loca10["yield"])))
# Mean of these
mean(var(loca1["yield"]),var(loca2["yield"]),var(loca3["yield"]),var(loca4["yield"]),var(loca6["yield"]),var(loca7["yield"]),var(loca8["yield"]),var(loca10["yield"]))
summary(modelDGTolsenP)
summary(modelAll)
# Combined model: yield ~ location + DGT + olsenP
modelAll <- lm(yield ~ location + DGT + olsenP)
### Loading data
load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
# Attach makes it unnescesary to write 'Phosphorous$'location
attach(Phosphorous)
# Combined model: yield ~ location + DGT + olsenP
modelAll <- lm(yield ~ location + DGT + olsenP)
### Making linear model from both DGT and olsenP
par(mfrow = c(2,2))
### Loading data
load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
location
Phosphorous$location <- as.factor(Phosphorous$location)
location
location <- as.factor(Phosphorous$location)
location
# Attach makes it unnescesary to write 'Phosphorous$'location
attach(Phosphorous)
location
# Give short data summary of quartiles and min/max
summary(Phosphorous)
# Plotting correlation between yield, DGT and olsenP. Location is not relevant here
plot(Phosphorous[c("yield","DGT","olsenP")],main="Correlation plots of Phosphorous data set")
plot(Phosphorous)
# Boxplot
plot(location,yield,xlab="Field",ylab="Yield (hkg/ha)",main="Boxplot of yield for each field")
plot(Phosphorous)
# Combined model: yield ~ location + DGT + olsenP
modelAll <- lm(yield ~ location + DGT + olsenP)
summary(modelAll)
plot(modelAll, main="yield ~ location + DGT + olsenP")
# Model: yield ~ DGT
modelDGT <- lm(yield ~ DGT)
summary(modelDGT)
anova(modelDGT)
# Model: yield ~ olsenP
modelOlsenP <- lm(yield ~ olsenP)
summary(modelOlsenP)
summary(modelAll)
anova(modelDGT)
anova(modelOlsenP)
### Here we train the linear model on 80% of data and test on 20% CV
set.seed(101) # Set Seed so that same sample can be reproduced in future also
# Now Selecting 75% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(Phosphorous), size = floor(.75*nrow(Phosphorous)), replace = F)
train <- kalk[sample, ]
test  <- kalk[-sample, ]
train <- Phosphorous[sample, ]
View(train)
test  <- Phosphorous[-sample, ]
# Train linar model regression on DGT and validate accuracy
modelTrain <- lm(train$yield ~ train$DGT)
# Train linar model regression on DGT and validate accuracy
modelTrainDGT <- lm(train$yield ~ train$DGT)
summary(modelTrainDGT)
PhosphorousTrain <- Phosphorous[sample, ]
PhosphorousTest  <- Phosphorous[-sample, ]
predictions <- predict(modelTrainDGT, PhosphorousTest)
mean((PhosphorousTest$yield - predictions)^2) ## Mean squared prediction error
# Train linar model regression on olsenP and validate accuracy
modelTrainOlsenP <- lm(PhosphorousTrain$yield ~ PhosphorousTrain$olsenP)
summary(modelTrainOlsenP)
predictions <- predict(modelTrainOlsenP, PhosphorousTest)
predictionsDGT <- predict(modelTrainDGT, PhosphorousTest)
mean((PhosphorousTest$yield - predictionsDGT)^2) ## Mean squared prediction error
predictionsOlsenP <- predict(modelTrainOlsenP, PhosphorousTest)
mean((PhosphorousTest$yield - predictionsOlsenP)^2) ## Mean squared prediction error
### Here we train the linear model on 80% of data and test on 20% CV
set.seed(1)
# Now Selecting 75% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(Phosphorous), size = floor(.75*nrow(Phosphorous)), replace = F)
PhosphorousTrain <- Phosphorous[sample, ]
PhosphorousTest  <- Phosphorous[-sample, ]
# Train linar model regression on DGT and validate accuracy
modelTrainDGT <- lm(PhosphorousTrain$yield ~ PhosphorousTrain$DGT)
summary(modelTrainDGT)
predictionsDGT <- predict(modelTrainDGT, PhosphorousTest)
predictionsDGT
mean((PhosphorousTest$yield - predictionsDGT)^2) ## Mean squared prediction error
# Train linar model regression on olsenP and validate accuracy
modelTrainOlsenP <- lm(PhosphorousTrain$yield ~ PhosphorousTrain$olsenP)
summary(modelTrainOlsenP)
predictionsOlsenP <- predict(modelTrainOlsenP, PhosphorousTest)
mean((PhosphorousTest$yield - predictionsOlsenP)^2) ## Mean squared prediction error
### Loading data
load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
# Attach makes it unnescesary to write 'Phosphorous$'location
attach(Phosphorous)
# Give short data summary of quartiles and min/max
summary(Phosphorous)
location <- as.factor(Phosphorous$location)
# Give short data summary of quartiles and min/max
summary(Phosphorous)
### Loading data
load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
Phosphorous <- as.factor(Phosphorous["location"])
### Loading data
load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
as.factor(Phosphorous["location"])
View(Phosphorous)
### Loading data
load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
as.factor(Phosphorous$location)
location
plot(location,yield)
Phosphorous$location
plot(Phosphorous$location,yield)
### Loading data
load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
location
plot(location,yield)
plot(location,yield)
plot(as.factor(location),yield)
#as.factor(Phosphorous$location)
# Attach makes it unnescesary to write 'Phosphorous$'location
attach(Phosphorous)
plot(location,yield)
# Give short data summary of quartiles and min/max
summary(Phosphorous)
# Defining different subsets of the different locations
loca1 <- Phosphorous[location == "001",]
loca2 <- Phosphorous[location == "002",]
loca3 <- Phosphorous[location == "003",]
loca4 <- Phosphorous[location == "004",]
loca6 <- Phosphorous[location == "006",]
loca7 <- Phosphorous[location == "007",]
loca8 <- Phosphorous[location == "008",]
loca9 <- Phosphorous[location == "009",]
loca10 <- Phosphorous[location == "010",]
# Variance of all locations' yield
var(loca1["yield"])
var(loca2["yield"])
var(loca3["yield"]) # = 10.83938
var(loca4["yield"]) # = 10.83938
var(loca6["yield"]) # = 10.83938
var(loca7["yield"]) # = 10.83938
var(loca8["yield"]) # = 10.83938
var(loca10["yield"]) # = 10.83938
# Mean of these
mean(var(loca1["yield"]),var(loca2["yield"]),var(loca3["yield"]),var(loca4["yield"]),var(loca6["yield"]),var(loca7["yield"]),var(loca8["yield"]),var(loca10["yield"]))
# Plotting correlation between yield, DGT and olsenP. Location is not relevant here
plot(Phosphorous[c("yield","DGT","olsenP")],main="Correlation plots of Phosphorous data set")
cor(Phosphorous[c("yield","DGT","olsenP")]) #Correlation matrix
u
plot(Phosphorous)
### Making linear models for differentiation between measurement methods and prediction
par(mfrow = c(2,2))
### Loading data
load("fosfor_data.RData")
# Removing field '011' from data set
Phosphorous <- Phosphorous[Phosphorous$location != "011",]
#as.factor(Phosphorous$location)
# Attach makes it unnescesary to write 'Phosphorous$'location
attach(Phosphorous)
location
### Here we train the linear model on 75% of data and test on 25% CV
set.seed(1)
sample <- sample.int(n = nrow(Phosphorous), size = floor(.75*nrow(Phosphorous)), replace = F)
PhosphorousTrain <- Phosphorous[sample, ]
PhosphorousTest  <- Phosphorous[-sample, ]
View(PhosphorousTest)
View(PhosphorousTrain)
PhosphorousTrain$yield
# Train linar model regression on DGT and validate accuracy
modelTrainDGT <- lm(PhosphorousTrain$yield ~ PhosphorousTrain$DGT)
summary(modelTrainDGT)
# Train linar model regression on olsenP and validate accuracy
modelTrainOlsenP <- lm(PhosphorousTrain$yield ~ PhosphorousTrain$olsenP)
summary(modelTrainOlsenP)
predictionsDGT <- predict(modelTrainDGT, PhosphorousTest)
predictionsDGT
mean((PhosphorousTest$yield - predictionsDGT)^2) ## Mean squared prediction error
predictionsOlsenP <- predict(modelTrainOlsenP, PhosphorousTest)
mean((PhosphorousTest$yield - predictionsOlsenP)^2) ## Mean squared prediction error
32/100
100/32
100-(100/32)
### The same kind of training is performed in a range of percentages
perc <- c(0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.96875)
DGTac <- rep(NA,length(perc)
DGTac <- rep(NA,length(perc))
DGTac
DGTac <- rep(NA,length(perc))
DGTac
olsenPac <- rep(NA,length(perc))
for (i in range(1:length(perc))){
sample <- sample.int(n = nrow(Phosphorous), size = floor(perc[i]*nrow(Phosphorous)), replace = F)
PhosphorousTrain <- Phosphorous[sample, ]
PhosphorousTest  <- Phosphorous[-sample, ]
modelTrainDGT <- lm(yield ~ DGT, data = PhosphorousTrain)
modelTrainolsenP <- lm(yield ~ olsenP, data = PhosphorousTrain)
# Append MSE DGT
predictionsDGT <- predict(modelTrainDGT, PhosphorousTest)
DGTac[i] <- mean((PhosphorousTest$yield - predictionsDGT)^2)
# Append MSE olsenP
predictionsOlsenP <- predict(modelTrainOlsenP, PhosphorousTest)
olsenPac[i] <- mean((PhosphorousTest$yield - predictionsOlsenP)^2)
}
for (i in range(1:length(perc))){
sample <- sample.int(n = nrow(Phosphorous), size = floor(perc[i]*nrow(Phosphorous)), replace = F)
print(sample)
# PhosphorousTrain <- Phosphorous[sample, ]
# PhosphorousTest  <- Phosphorous[-sample, ]
# modelTrainDGT <- lm(yield ~ DGT, data = PhosphorousTrain)
# modelTrainolsenP <- lm(yield ~ olsenP, data = PhosphorousTrain)
# # Append MSE DGT
# predictionsDGT <- predict(modelTrainDGT, PhosphorousTest)
# DGTac[i] <- mean((PhosphorousTest$yield - predictionsDGT)^2)
# # Append MSE olsenP
# predictionsOlsenP <- predict(modelTrainOlsenP, PhosphorousTest)
# olsenPac[i] <- mean((PhosphorousTest$yield - predictionsOlsenP)^2)
#
}
for (i in (1:length(perc))){
sample <- sample.int(n = nrow(Phosphorous), size = floor(perc[i]*nrow(Phosphorous)), replace = F)
print(sample)
# PhosphorousTrain <- Phosphorous[sample, ]
# PhosphorousTest  <- Phosphorous[-sample, ]
# modelTrainDGT <- lm(yield ~ DGT, data = PhosphorousTrain)
# modelTrainolsenP <- lm(yield ~ olsenP, data = PhosphorousTrain)
# # Append MSE DGT
# predictionsDGT <- predict(modelTrainDGT, PhosphorousTest)
# DGTac[i] <- mean((PhosphorousTest$yield - predictionsDGT)^2)
# # Append MSE olsenP
# predictionsOlsenP <- predict(modelTrainOlsenP, PhosphorousTest)
# olsenPac[i] <- mean((PhosphorousTest$yield - predictionsOlsenP)^2)
#
}
for (i in (1:length(perc))){
sample <- sample.int(n = nrow(Phosphorous), size = floor(perc[i]*nrow(Phosphorous)), replace = F)
PhosphorousTrain <- Phosphorous[sample, ]
PhosphorousTest  <- Phosphorous[-sample, ]
modelTrainDGT <- lm(yield ~ DGT, data = PhosphorousTrain)
modelTrainolsenP <- lm(yield ~ olsenP, data = PhosphorousTrain)
# Append MSE DGT
predictionsDGT <- predict(modelTrainDGT, PhosphorousTest)
DGTac[i] <- mean((PhosphorousTest$yield - predictionsDGT)^2)
# Append MSE olsenP
predictionsOlsenP <- predict(modelTrainOlsenP, PhosphorousTest)
olsenPac[i] <- mean((PhosphorousTest$yield - predictionsOlsenP)^2)
}
warnings()
par(mfrow = c(1,2))
plot(location,yield)
plot(location,yield)
plot(perc, DGTac, xlab="Percent training data", ylab="Accuracy")
plot(perc, olsenPac, xlab="Percent training data", ylab="Accuracy olsenP")
# Plotting accuracies found for predictions
par(mfrow = c(1,1))
plot(perc, DGTac, olsenPac, xlab="Percent training data", ylab="Accuracy DGT")
plot(perc, (DGTac, olsenPac), xlab="Percent training data", ylab="Accuracy DGT")
plot(perc, c(DGTac, olsenPac), xlab="Percent training data", ylab="Accuracy DGT")
plot(perc, [DGTac, olsenPac], xlab="Percent training data", ylab="Accuracy DGT")
plot(perc, DGTac, xlab="Percent training data", ylab="Accuracy DGT")
plot(perc, olsenPac, xlab="Percent training data", ylab="Accuracy olsenP")
ggplot
library(ggplot2)
library(lattice, lib.loc = "C:/Program Files/R/R-3.6.2/library")
xyplot(DGTac + olsenPac ~ perc)
xyplot(DGTac + olsenPac ~ perc, xlab="Percent training data")
xyplot(DGTac + olsenPac ~ perc, xlab="Percent training data", ylab="Accuracy of DGT and olsenP")
xyplot(DGTac + olsenPac ~ perc, xlab="Percent training data", ylab="Accuracy of DGT and olsenP", auto.key=TRUE)
set.seed(50)
for (i in (1:length(perc))){
sample <- sample.int(n = nrow(Phosphorous), size = floor(perc[i]*nrow(Phosphorous)), replace = F)
PhosphorousTrain <- Phosphorous[sample, ]
PhosphorousTest  <- Phosphorous[-sample, ]
modelTrainDGT <- lm(yield ~ DGT, data = PhosphorousTrain)
modelTrainolsenP <- lm(yield ~ olsenP, data = PhosphorousTrain)
# Append MSE DGT
predictionsDGT <- predict(modelTrainDGT, PhosphorousTest)
DGTac[i] <- mean((PhosphorousTest$yield - predictionsDGT)^2)
# Append MSE olsenP
predictionsOlsenP <- predict(modelTrainOlsenP, PhosphorousTest)
olsenPac[i] <- mean((PhosphorousTest$yield - predictionsOlsenP)^2)
}
xyplot(DGTac + olsenPac ~ perc, xlab="Percent training data", ylab="Accuracy of DGT and olsenP", auto.key=TRUE)
set.seed(101)
for (i in (1:length(perc))){
sample <- sample.int(n = nrow(Phosphorous), size = floor(perc[i]*nrow(Phosphorous)), replace = F)
PhosphorousTrain <- Phosphorous[sample, ]
PhosphorousTest  <- Phosphorous[-sample, ]
modelTrainDGT <- lm(yield ~ DGT, data = PhosphorousTrain)
modelTrainolsenP <- lm(yield ~ olsenP, data = PhosphorousTrain)
# Append MSE DGT
predictionsDGT <- predict(modelTrainDGT, PhosphorousTest)
DGTac[i] <- mean((PhosphorousTest$yield - predictionsDGT)^2)
# Append MSE olsenP
predictionsOlsenP <- predict(modelTrainOlsenP, PhosphorousTest)
olsenPac[i] <- mean((PhosphorousTest$yield - predictionsOlsenP)^2)
}
# Plotting accuracies found for predictions
par(mfrow = c(1,1))
xyplot(DGTac + olsenPac ~ perc, xlab="Percent training data", ylab="Accuracy of DGT and olsenP", auto.key=TRUE)
